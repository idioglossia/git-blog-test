{"id":1,"date":"2020-11-11T08:54:26.025+0000","title":"Sloth DB","description":"A berif explaination of Sloth DB and its usage","content":"<p>Sloth DB is a slow key value storage in Java, where keys are file names and values are file contents!\r\nNo file locks available since two processes are not supposed to work with same Sloth DB storage at same time! In other words, Sloth DB just simply writes files in an organized way! You have to take care of concurrency issues in your application layer.</p><p><a href=\"https://github.com/idioglossia/sloth-db/blob/main/src/test/java/Sample.java\">This Sample</a> can show you how to create a storage and collections.\r\nCurrently Sloth DB supports <font color=\"#E76363\">MAP</font> and <font color=\"#E76363\">LIST</font> collections and can store <code>byte[]</code> or <code>String</code>. </p><h3><span style=\"font-weight: normal;\">Use Case</span></h3><p>Sloth DB is only good to store small values in files. File names are \r\nkeys and directory names are collection names. Main usage for storage \r\nmight be cases when you need to easily find your data when you are \r\nlooking at the DB directory; Which can be helpful to store some simple \r\ndata for web applications since the data is easily accessible through \r\nvalid paths.</p>\r\n<p>For example if you create a MAP collection with name \"users\" and add \r\ndata with key \"james\", any other application can easily access this data\r\n through this path:<code><br></code></p><pre><span style=\"background-color: inherit;\"><font color=\"#000000\"><code><code>{dbPath}/users/james</code></code></font></span></pre><h3>Json Sloth<br></h3><p><a href=\"https://github.com/idioglossia/json-sloth\" target=\"_blank\">Json Sloth</a> is a wrapper that writes json values in files. This wrapper uses Jackson library to convert entity to json, and automatically takes care of your entity ID's. Therefore, you are free to use Jackson annotations in your entity.</p><p>Both SlothDB and JsonSloth wrapper were used in <b>Git Blog </b>to save data such as posts, tags, users and images. This data is easily accessible through JavaScript, which is vital in Git Blog since there is no backend compatibility in \"Github Pages\"</p><p>I hope this post has gave you an basic idea of how SlothDB works and how its used in Git Blog.<br></p>","followUpButton":null,"username":"admin","tags":["Database","Tools"],"cover":"f00472ee-a85f-441e-a9c0-10bc666b9434.png","thumbnail":null}
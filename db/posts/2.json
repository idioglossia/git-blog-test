{"id":2,"date":"2020-11-11T09:24:10.951+0000","title":"Gitlab CE Installation (unembedded nginx)","description":"This post descripts how to install gitlab ce on your ubuntu machine","content":"<p></p><p></p><p>In this tutorial I will teach you how to install and configure Gitlab CE to host git repositories on your machine. Also, we try to use the nginx we are already using in our system, and disable built in nginx of gitlab.<br></p><p><strong>Note</strong>: This has been tested on ubuntu 18.04 server \r\nand might work with other versions of ubuntu too. No other distros has \r\nbeen tested and it probably isn't going to work on them unless you make \r\nfew changes to the procedure.</p>\r\n<h2><span style=\"font-weight: normal;\">Configure DNS</span></h2>\r\n<p>In this tutorial I am using <code>gitlab.yourdomain.com</code> as \r\nexample of address we are going to use to access our gitlab ce instance.\r\n Make sure this record is available on DNS and is pointing to your \r\nserver.</p>\r\n<h2>Install required packages</h2>\r\n<pre><code>sudo apt install curl openssh-server ca-certificates postfix\r\n</code></pre>\r\n<p>When installing <code>postfix</code> you might be prompted to select <strong>General Type Of Email Configuration</strong>, Select <code>Internet Site</code> and enter fully qualified domain name of your site.</p>\r\n<h2>Install Gitlab</h2>\r\n<p>Below command adds all the required package repositories.</p>\r\n<pre><code>curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash\r\n</code></pre>\r\n<p>Now you can install gitlab.</p>\r\n<pre><code>sudo apt install gitlab-ce\r\n</code></pre>\r\n<h2>Configure Gitlab Main URL</h2>\r\n<p>The main configuration of GitLab is in the '/etc/gitlab' directory. \r\nGo to that directory and edit the configuration file 'gitlab.rb' with \r\nnano (or your prefered editor)</p>\r\n<pre><code>cd /etc/gitlab\r\nnano gitlab.rb\r\n</code></pre>\r\n<p>In the GitLab configuration go to line 9 'external_url' and change the URL to your URL 'gitlab.yourdomain.com'.</p>\r\n<pre><code>external_url 'https://gitlab.yourdomain.com'\r\n</code></pre>\r\n<p>Close editor and save changes.</p>\r\n<h2>Generate SSL Let's encrypt and DHPARAM Certificate</h2>\r\n<p>We will enable the HTTPS protocol for GitLab. I will use a free SSL \r\ncertificates provided by let's encrypt for the gitlab domain name.</p>\r\n<pre><code>sudo apt install letsencrypt -y\r\n</code></pre>\r\n<p>When the installation is complete, generate a new certificate for the gitlab domain name with the command below.</p>\r\n<pre><code>letsencrypt certonly --standalone --agree-tos --no-eff-email --agree-tos --email info@yourdomain.com -d gitlab.yourdomain.com\r\n</code></pre>\r\n<p><strong>Note</strong>: You might need to stop your already running \r\nnginx or stop services that run on port 80 before you run the above \r\ncommand. Also make sure you are entering valid email address.</p>\r\n<p>Example output of the command:</p>\r\n<pre><code> - Congratulations! Your certificate and chain have been saved at:\r\n   /etc/letsencrypt/live/gitlab.yourdomain.com/fullchain.pem\r\n   Your key file has been saved at:\r\n   /etc/letsencrypt/live/gitlab.yourdomain.com/privkey.pem\r\n</code></pre>\r\n<p>Please save or remember where your files are persisted. You are gonna need them later.</p>\r\n<p>now lets generate dhparam pem files in the ssl directory with the openssl command.</p>\r\n<pre><code>mkdir -p /etc/gitlab/ssl/\r\nsudo openssl dhparam -out /etc/gitlab/ssl/dhparams.pem 2048\r\nchmod 600 /etc/gitlab/ssl/*\r\n</code></pre>\r\n<h2>Use your own nginx</h2>\r\n<p>As you might already know, gitlab comes with its own embedded nginx. \r\nBut you can change gitlab configuration so it doesnt use its own nginx. \r\nThen you can add proper reverse proxy configuration to your own running \r\nnginx so you can access gitlab.</p>\r\n<h3>Tell gitlab to not to use embedded nginx</h3>\r\n<p>Edit your gitlab.rb file.</p>\r\n<pre><code>sudo nano /etc/gitlab/gitlab.rb\r\n</code></pre>\r\n<p>Add below configuration. Remember most of the key names are already \r\navailable. You can just search for the keys and remove the comments and \r\nedit them.</p>\r\n<pre><code>web_server['external_users'] = ['www-data', 'gitlab-www']\r\n\r\nnginx['enable'] = false\r\n\r\ngitlab_rails['trusted_proxies'] = [ '192.168.1.0/24', '192.168.2.1', '2001:0db8::/32']\r\n</code></pre>\r\n<ul><li>On ubuntu, the default user for nginx is <code>www-data</code>, so on first line we are letting this user to access gitlab-ce socket.</li><li>We disabled embedded nginx with second command</li><li><strong>IMPORTANT</strong> add your server local ip to the array of third command.</li></ul>\r\n<p></p><p></p><h3><br></h3><h3>Nginx proxy</h3>\r\n<p>Copy the contents of <code>nginx.conf</code> file of this repository and paste it as your nginx configuration, under <code>/etc/nginx/sites-enable/gitlab.conf</code>. Remember to change the lines of <code>gitlab.yourdomain.com</code> to valid address.</p>\r\n<p>Also check if <code>ssl_dhparam</code>, <code>ssl_certificate</code>, <code>ssl_certificate_key</code> are pointing to valid files.</p><hr>\r\n<h2>Final step</h2>\r\n<p>Now run reconfiguration for gitlab:</p>\r\n<pre><code>sudo gitlab-ctl reconfigure\r\n</code></pre>\r\n<p>and restart nginx</p>\r\n<pre><code>sudo service nginx restart\r\n</code></pre>\r\n<p>You are done.</p>\r\n<hr>\r\n<h4>sources</h4>\r\n<ul><li><a href=\"https://www.howtoforge.com/tutorial/how-to-install-and-configure-gitlab-on-ubuntu-16-04/\" rel=\"nofollow\">https://www.howtoforge.com/tutorial/how-to-install-and-configure-gitlab-on-ubuntu-16-04/</a></li><li><a href=\"https://docs.gitlab.com/omnibus/settings/nginx.html\" rel=\"nofollow\">https://docs.gitlab.com/omnibus/settings/nginx.html</a></li></ul><p></p><p></p><p><br></p>","followUpButton":{"text":"See Project in Github","link":"https://github.com/idioglossia/spring-rest-over-ws"},"username":"admin","tags":["tutorial","tools"],"cover":"2f340eb2-9a37-4477-b7f9-b2ec023f4a66.png","thumbnail":"54689c0a-5189-4caa-bb1c-0ca1c3738157.jpg"}